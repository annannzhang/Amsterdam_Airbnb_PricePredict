panel.grid.minor=element_blank(),
legend.direction = "vertical",
legend.position = "right",
plot.margin = margin(1, 1, 1, 1, 'cm'),
legend.key.height = unit(1, "cm"), legend.key.width = unit(0.2, "cm"))
ggplot()+
geom_sf(data=neighborhood)+
mapTheme()
#Adding the variable to the data set
details.sf <-
left_join(details.sf, details.sf.c.MetroRings %>% st_drop_geometry() %>% dplyr::select(metro.dist, id), by="id")
#multi-ring buffer
Metro_MRB <- multipleRingBuffer(st_union(metro.c), 6500, 500)
```{r deal with panel, include=TRUE, echo = TRUE, message = FALSE, warning = FALSE, cache=TRUE}
study.panel <-
expand.grid(listing_id = unique(calendar$listing_id),
month=unique(available_calendar2$month))
study.panel$listing_id <- as.character(study.panel$listing_id)
```{r deal with panel, include=TRUE, echo = TRUE, message = FALSE, warning = FALSE}
source("~/.active-rstudio-document", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE, quiet = TRUE, warning=FALSE)
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
library(tidyverse)
library(sf)
library(RSocrata)
library(viridis)
library(spatstat)
library(ggplot2)
library(raster)
library(spdep)
library(FNN)
library(mapview)
library(grid)
library(gridExtra)
library(knitr)
library(stringr)
library(kableExtra)
library(tidycensus)
library(lubridate)
library(viridis)
library(stargazer)
library(dplyr)
library(plyr)
library(scales)
library(RColorBrewer)
library(gridExtra)
library(ggthemes)
library(readr)
library(ggcorrplot)
library(caret)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(osmdata)
#text mining
library(tm)
library(wordcloud2)
library(SnowballC)
options(scipen=999)
palette5 <- c("#FA8072","#9FE2BF","#FF006A","#FE4C35","#FE9900")
palette4 <- c("#FA8072","#9FE2BF","#FE4C35","#FE9900")
palette2 <- c("#FA8072","#9FE2BF")
Teal <- c("#d1eeea", "#a8dbd9", "#85c4c9", "#68abb8", "#4f90a6")
Purple <- c("#f3e0f7", "#e4c7f1", "#d1afe8", "#b998dd", "#9f82ce")
Pink <- c("#ffffff","#f9f4f4","#f0e4e4", "#e7d3d3", "#dec3c3")
nn_function <- function(measureFrom,measureTo,k) {
measureFrom_Matrix <- as.matrix(measureFrom)
measureTo_Matrix <- as.matrix(measureTo)
nn <-
get.knnx(measureTo, measureFrom, k)$nn.dist
output <-
as.data.frame(nn) %>%
rownames_to_column(var = "thisPoint") %>%
gather(points, point_distance, V1:ncol(.)) %>%
arrange(as.numeric(thisPoint)) %>%
group_by(thisPoint) %>%
summarize(pointDistance = mean(point_distance)) %>%
arrange(as.numeric(thisPoint)) %>%
dplyr::select(-thisPoint) %>%
pull()
return(output)
}
rquery.wordcloud <- function(x, type=c("text", "url", "file"),
lang="english", excludeWords=NULL,
textStemming=FALSE,  colorPalette="Dark2",
min.freq=3, max.words=200)
{
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
if(type[1]=="file") text <- readLines(x)
else if(type[1]=="url") text <- html_to_text(x)
else if(type[1]=="text") text <- x
# Load the text as a corpus
docs <- Corpus(VectorSource(text))
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove stopwords for the language
docs <- tm_map(docs, removeWords, stopwords(lang))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Remove your own stopwords
if(!is.null(excludeWords))
docs <- tm_map(docs, removeWords, excludeWords)
# Text stemming
if(textStemming) docs <- tm_map(docs, stemDocument)
# Create term-document matrix
tdm <- TermDocumentMatrix(docs)
m <- as.matrix(tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
# check the color palette name
if(!colorPalette %in% rownames(brewer.pal.info)) colors = colorPalette
else colors = brewer.pal(8, colorPalette)
# Plot the word cloud
set.seed(1234)
wordcloud(d$word,d$freq, min.freq=min.freq, max.words=max.words,
random.order=FALSE, rot.per=0.35,
use.r.layout=FALSE, colors=colors)
invisible(list(tdm=tdm, freqTable = d))
}
#++++++++++++++++++++++
# Helper function
#++++++++++++++++++++++
# Download and parse webpage
html_to_text<-function(url){
library(RCurl)
library(XML)
# download html
html.doc <- getURL(url)
#convert to plain text
doc = htmlParse(html.doc, asText=TRUE)
# "//text()" returns all text outside of HTML tags.
# We also donâ€™t want text such as style and script codes
text <- xpathSApply(doc, "//text()[not(ancestor::script)][not(ancestor::style)][not(ancestor::noscript)][not(ancestor::form)]", xmlValue)
# Format text vector into one character string
return(paste(text, collapse = " "))
}
#listings <- st_read("listings.csv")
#details <- st_read("listings_details.csv")
#calendar <- read.csv("calendar.csv")
details <- read.csv("D:/MUSAFall/MUSA_508/508_Amsterdam_Non-Git/listings_details.csv")
listings <- read.csv("D:/MUSAFall/MUSA_508/508_Amsterdam_Non-Git/listings.csv")
calendar <- read.csv("D:/MUSAFall/MUSA_508/508_Amsterdam_Non-Git/calendar.csv")
#large neighborhood
neighborhood <- st_read('neighbourhoods.geojson')
#small neighborhood
neighbor2 <- st_read('neighbor2.json') %>%
st_transform(st_crs(neighborhood))
developing_area <- st_read('developing_area.json') %>%
st_transform(st_crs(neighborhood))
crowdsensor <- st_read('crowdsensor.json') %>%
st_transform(st_crs(neighborhood))
metro <- st_read('tram_metro_stops.json') %>%
st_transform(st_crs(neighborhood))
buildingyear <- st_read('buildingyearblock.json') %>%
st_transform(st_crs(neighborhood))
zipcode6 <- st_read('zipcode6.json') %>%
st_transform(st_crs(neighborhood))
zipcode4 <- st_read('zipcode4.json') %>%
st_transform(st_crs(neighborhood))
details.sf <- st_as_sf(details,coords = c('longitude','latitude'),crs = 4326) %>%
st_transform(st_crs(neighborhood))
details.sf$price <- parse_number(details.sf$price)
details.sf$weekly_price <- parse_number(details.sf$weekly_price)
details.sf$monthly_price <- parse_number(details.sf$monthly_price)
details.sf$cleaning_fee <- parse_number(details.sf$cleaning_fee)
details.sf$extra_people <- parse_number(details.sf$extra_people)
details.sf$security_deposit <- parse_number(details.sf$security_deposit)
details.sf$beds <- as.numeric(details.sf$beds)
details.sf$minimum_nights <- as.numeric(details.sf$minimum_nights)
details.sf$maximum_nights <- as.numeric(details.sf$maximum_nights)
details.sf$number_of_reviews <- as.numeric(details.sf$number_of_reviews)
details.sf$review_scores_rating <- as.numeric(details.sf$review_scores_rating)
details.sf$review_scores_accuracy <- as.numeric(details.sf$review_scores_accuracy)
details.sf$review_scores_cleanliness<- as.numeric(details.sf$review_scores_cleanliness)
details.sf$review_scores_value <- as.numeric(details.sf$review_scores_value)
details.sf$reviews_per_month <- as.numeric(details.sf$reviews_per_month)
details.sf$id <- as.character(details.sf$id)
details.sf$property_type <- as.factor(details.sf$property_type)
details.sf.raw <- details.sf
# Available Calendar
available_calendar <- calendar %>%
filter(available =="t")
available_calendar$listing_id <- as.character(available_calendar$listing_id)
# Price change
available_calendar <- available_calendar%>%
mutate(price2 = gsub("^.","",price))%>%
mutate(price2 = gsub(",","",price2))
available_calendar$price3 <- as.numeric(available_calendar$price2)
# Sum per month
available_calendar2 <- available_calendar%>%
mutate(date2 = ymd(date))%>%
mutate(month = month(date2))%>%
group_by(listing_id, month) %>%
dplyr::summarize(month_price = mean(price3))
length(unique(calendar$listing_id))
length(unique(calendar$listing_id))*12
study.panel <-
expand.grid(listing_id = unique(calendar$listing_id),
month=unique(available_calendar2$month))
study.panel$listing_id <- as.character(study.panel$listing_id)
listing_panel <- study.panel %>%
left_join(available_calendar2) %>%
mutate(each_month_price = 0)
o <- order(listing_panel[,"listing_id"],listing_panel[,"month"])
listing_panel <- listing_panel[o,]
xx <- 0
for(i in 2:nrow(listing_panel)){
if(!is.na(listing_panel[i,3])){
xx <- listing_panel[i,3]
listing_panel[i,4]=listing_panel[i,3]
}
if(is.na(listing_panel[i,3])& listing_panel[i-1,1]==listing_panel[i,1]){
listing_panel[i,4] <- xx
}
if(is.na(listing_panel[i,3])& listing_panel[i-1,1]!=listing_panel[i,1]){
xx <- 0
listing_panel[i,4] <- xx
}
}
d <- order(listing_panel[,"listing_id"],-listing_panel[,"month"])
listing_panel <- listing_panel[d,]
for(i in 2:nrow(listing_panel)){
if(listing_panel[i,4]==0){
listing_panel[i,4]=listing_panel[i-1,4]
}
}
o <- order(listing_panel[,"listing_id"],listing_panel[,"month"])
listing_panel <- listing_panel[o,]
listing_0price <- listing_panel %>%
filter(each_month_price == 0)
no_price <- unique(listing_0price$listing_id)
#Filter data with no price
listing_panel <- listing_panel %>%
filter(!listing_id %in% no_price)
sf_use_s2(FALSE)
listings.sf<- listings %>%
st_as_sf(coords = c( "longitude","latitude"), crs = 4326, agr = "constant") %>% st_transform('ESRI:102013')
neighbor2 <- neighbor2 %>%
st_transform(st_crs(listings.sf))
listing.sf.neighbor2 <- st_intersection(listings.sf,neighbor2) %>%
dplyr::select(id, Buurt,Buurt_code) %>%
mutate(count=1) %>%
st_drop_geometry()
listings.sf <- left_join(listings.sf, listing.sf.neighbor2,by='id')
neighbo2.count <- listings.sf %>%
group_by(Buurt) %>%
dplyr::summarise(airbnb.number = sum(count)) %>%
dplyr::select(Buurt, airbnb.number) %>%
st_drop_geometry()
neighbor2 <- left_join(neighbor2,neighbo2.count,by="Buurt")
ggplot()+
geom_sf(data = neighbor2, aes(fill=q5(airbnb.number)),color='transparent')+
scale_fill_manual(values = Teal,
labels = qBr(neighbor2,'airbnb.number'), name = 'Count')+
labs(title = "Number of Airbnb per Neighborhood", subtitle = "Amsterdam, NL; 2018") +
mapTheme()
neighbor2 %>% ggplot() +
geom_sf(aes(fill = airbnb.number), color = 'white') +
scale_fill_gradient(low = Teal[1], high = Teal[5],
name = "Count") +
labs(title = "Number of Airbnb per Zipcode", subtitle = "Amsterdam, NL; 2018") +
mapTheme()
Month_price <- calendar%>%
mutate(date2 = ymd(date))%>%
mutate(month = month(date2),
listing_id = as.character(listing_id),
price = parse_number(price))%>%
mutate(month = as.character(month))%>%
mutate(month = ifelse(month != 10 & month != 11 & month != 12, gsub("^","0",month), month)) %>%
drop_na(price) %>%
group_by(month) %>%
dplyr::summarize(mean_monthly_price = mean(price))
ggplot(Month_price,
aes(x=month, y=mean_monthly_price, group =1)) +
geom_line(size=1, color = Teal[3]) +
labs(title = "Average Airbnb Price Every Month", subtitle = "Amsterdam, NL; 2018") +
xlab("Month of the Year") + ylab("Average Price") +
plotTheme()
details.sf <-
details.sf %>%
mutate(priceBed=price/beds) %>%
filter(priceBed <=1000)
ggplot()+
geom_sf(data = neighborhood,fill='grey95',color = 'white')+
geom_sf(data = details.sf, aes(colour=q5(priceBed)),size=.5)+
scale_color_manual(values = palette5,
labels = qBr(details.sf,'priceBed'), name="Price per Bed (Euro)") +
labs(title = "Price per Bed",
subtitle = 'Amsterdam Airbnb, price on 2018-12-6') +
mapTheme()
index <- function(x, flag = '0') {
digit <- floor(log10(length(x))) + 1
paste(flag, formatC(x, width = digit, flag = '0'), sep = '')
}
occupancy <- calendar%>%
mutate(date2 = ymd(date))%>%
mutate(month = month(date2),
count = ifelse(available == "f", 1, 0),
listing_id = as.character(listing_id))%>%
filter(!listing_id %in% no_price) %>%
group_by(listing_id, month) %>%
dplyr::summarize(monthly_occupancy = sum(count))
monthly_occupancy <- occupancy %>%
mutate(month = as.character(month))%>%
mutate(month = ifelse(month != 10 & month != 11 & month != 12, gsub("^","0",month), month)) %>%
group_by(month) %>%
dplyr::summarise(mean_monthly_occupancy = mean(monthly_occupancy))
ggplot(monthly_occupancy,
aes(x=month, y=mean_monthly_occupancy, group =1)) +
geom_line(size=1, color = "#FE9900") +
labs(title = "Airbnb Occupancy Every Month", subtitle = "Amsterdam, NL; 2018") +
xlab("Month of the Year") + ylab("Average Monthly Occupancy") +
plotTheme()
table.basic <- details.sf %>%
st_drop_geometry() %>%
dplyr::select(price ,beds, bedrooms, bathrooms, accommodates)
stargazer(as.data.frame(table.basic),
type = "text",
title ="Table 1. Basic Features Summary",
single.row = TRUE,
out.header = TRUE)
count(details.sf$property_type) %>%
kable() %>%
kable_styling() %>%
scroll_box(width = "800px", height = "200px")
details.sf %>%
st_drop_geometry() %>%
group_by(beds, bathrooms, bedrooms, accommodates, property_type) %>%
dplyr::summarize(Mean_Price = mean(price)) %>%
kable() %>%
kable_styling() %>%
scroll_box(width = "800px", height = "200px")
#pool
details.sf <- details.sf %>%
mutate(pool = ifelse(str_detect(amenities, "Pool"), "Yes", "No"))
#Paid parking off premises
details.sf <- details.sf %>%
mutate(parking = ifelse(str_detect(amenities, "Paid parking off premises"),
"Yes", "No"))
#Indoor fireplace
details.sf <- details.sf %>%
mutate(fireplace = ifelse(str_detect(amenities, "Indoor fireplace"),
"Yes", "No"))
#Waterfront
details.sf <- details.sf %>%
mutate(waterfront = ifelse(str_detect(amenities, "Waterfront"),
"Yes", "No"))
#Kitchen
details.sf <- details.sf %>%
mutate(kitchen = ifelse(str_detect(amenities, "Kitchen"),
"Yes", "No"))
#Air conditioning
details.sf <- details.sf %>%
mutate(AC = ifelse(str_detect(amenities, "Air conditioning"),
"Yes", "No"))
amenitie_vars <- c('fireplace','waterfront','pool','parking','kitchen','AC')
plotList <- list()
for (i in amenitie_vars){
plotList[[i]] <-
details.sf %>%st_drop_geometry() %>%
dplyr::select(price,i) %>%
filter(price<500) %>%
gather(Variable, value, -price) %>%
ggplot(aes(value, price, fill=value)) +
geom_boxplot() +
scale_fill_manual(values = c("#FFDD94", "#CCABDB")) +
labs(x="Amenity Status", y="Price",
title = i) +
theme(legend.position = "none") +
plotTheme()
}
do.call(grid.arrange,c(plotList, ncol = 3, top = "Price w/ vs. w/o Amenities"))
library(stringr)
details.sf <- details.sf %>%
mutate(amenities.number = str_count(amenities,",")+1)
details.sf.neighbor <- st_intersection(details.sf,zipcode4) %>%
dplyr::select(id, Postcode4) %>%
st_drop_geometry()
details.sf <- left_join(details.sf,details.sf.neighbor,by='id')
neighbor2 <- neighbor2 %>%
st_transform(st_crs(listings.sf))
listing.sf.neighbor2 <- st_intersection(listings.sf,neighbor2) %>%
dplyr::select(id, Buurt,Buurt_code) %>%
mutate(count=1) %>% st_drop_geometry()
listing.sf.neighbor2$id <- as.character(listing.sf.neighbor2$id)
detail.sf <- left_join(details.sf,listing.sf.neighbor2, by = "id")
occupancy3 <- occupancy %>%
dplyr::rename(id = listing_id)
occupancy3 <-
left_join(occupancy3, st_drop_geometry(details.sf), by = "id")
listing_panel <- listing_panel%>%
dplyr::rename(id = listing_id)
revenue_panel <- merge(occupancy3,listing_panel[c("id","month","each_month_price")],by=c("id","month")) %>%
mutate(revenue = each_month_price*monthly_occupancy)
annualrevenue <- revenue_panel %>%
group_by(id) %>%
dplyr::summarise(annual_revenue = sum(revenue))
annualrevenue<- left_join(details.sf, annualrevenue,by="id")%>%
filter(!id %in% no_price)%>%
mutate(bathrooms = as.numeric(bathrooms),
bedrooms = as.numeric(bedrooms))
annualrevenue<- annualrevenue %>%
drop_na(annual_revenue) %>%
filter(annual_revenue <= 500000)
coords <- st_coordinates(annualrevenue)
neighborList <- knn2nb(knearneigh(coords, 5))
spatialWeights <- nb2listw(neighborList, style="W")
annualrevenue$lagRevenue <- lag.listw(spatialWeights, annualrevenue$annual_revenue)
ggplot(annualrevenue)+
geom_point(aes(x = price, y = annual_revenue), alpha = 0.26)+
geom_smooth(aes(x = price, y =annual_revenue), method = "lm", se= FALSE, color = "orange")+
labs(title="Price as a function of lagRevenue", y='Price', x = 'Lag Annual Revenue') +
plotTheme()
listings$longitude = as.numeric(listings$longitude)
listings$latitude = as.numeric(listings$latitude)
listings.sf<- listings %>%
st_as_sf(coords = c( "longitude","latitude"), crs = 4326, agr = "constant")
st_crs(metro) <- st_crs(listings.sf)
st_c <- st_coordinates
details.sf.c <- details.sf %>%
st_transform('ESRI:102013')
metro.c <- metro%>%
st_transform('ESRI:102013')
ggplot()+
geom_sf(data = neighbor2, aes(fill=q5(airbnb.number)),color='transparent') +
scale_fill_manual(values = Pink,
labels = qBr(neighbor2,'airbnb.number'), name = 'Count of Airbnb') +
geom_sf(data=metro.c$geometry, aes(color=metro.c$Modaliteit)) +
scale_color_manual(values=c(palette2[1], '#7171C6'), name = 'Type of Transit') +
labs(title = "Public Transit & Number of Airbnb", subtitle = "Amsterdam, NL; 2018") +
mapTheme()
#multi-ring buffer
Metro_MRB <- multipleRingBuffer(st_union(metro.c), 6500, 500)
#USE FOR REG: MRB Spatial Join
details.sf.c.MetroRings <-
st_join(dplyr::select(details.sf.c, id),
Metro_MRB) %>%
st_drop_geometry() %>%
left_join(details.sf.c, annualrevenue,
by="id") %>%
st_sf()%>%
mutate(metro.dist = distance/1000)
#Adding the variable to the data set
details.sf <-
left_join(details.sf, details.sf.c.MetroRings %>% st_drop_geometry() %>% dplyr::select(metro.dist, id), by="id")
#FOR VIS ONLY: Creating a summary table of the ring data
details.Rings.Summary <- details.sf.c.MetroRings %>%
dplyr::select(metro.dist, price)%>%
st_drop_geometry()%>%
group_by(metro.dist)%>%
dplyr::summarize(Price=median(price, na.rm=T))
#FOR VIS ONLY: Line Plot of the summary table
ggplot(data=details.Rings.Summary, aes(x=metro.dist, y=Price),)+
geom_line(size=1.5)+
geom_point(size = 3)+
labs(title = "Price as a Function of Distance from a Metro Station",
subtitle = "Amsterdam Airbnb Data, 2018",
x="Distance from a Metro Station (KM)",
y="Price (2018 Euro)")+
theme(plot.title = element_text(size=18))
annualrevenue <-
annualrevenue %>%
left_join(details.sf.c.MetroRings %>% st_drop_geometry %>% dplyr::select(metro.dist, id), by = 'id')
unesco <-
#st_read('UnescoWerelderfgoed_region.shp') %>%
st_read('geojson_lnglat.json') %>%
st_transform('ESRI:102013')
parks <- st_read('parks.json') %>%
st_transform('ESRI:102013')
attraction <- st_read('amsterdam-attraction.csv') %>%
filter(lat != 'attraction')
attraction <- st_as_sf(attraction,coords = c('lng','lat'),crs = 4326) %>%
st_transform('ESRI:102013')
parks <- attraction %>%
filter(subCategory == 'Park')
museum <- attraction %>%
filter(subCategory == 'Museum')
#supermarkets
supermarkets <- getbb('Amsterdam') %>%
opq() %>%
add_osm_feature('shop','supermarket') %>%
osmdata_sf()
#supermarkets
supermarkets <- getbb('Amsterdam') %>%
opq() %>%
add_osm_feature('shop','supermarket') %>%
osmdata_sf()
supermarkets <- supermarkets$osm_points %>%
dplyr::select(geometry)%>%
st_transform('ESRI:102013')%>%
dplyr::select(geometry) %>%
mutate(Legend = "supermarkets")
convenienceshop <- getbb('Amsterdam') %>%
opq() %>%
add_osm_feature('shop','convenience') %>%
osmdata_sf()
convenienceshop <- convenienceshop$osm_points %>%
dplyr::select(geometry)%>%
st_transform('ESRI:102013')%>%
dplyr::select(geometry) %>%
mutate(Legend = "convenienceshop")
mall <- getbb('Amsterdam') %>%
opq() %>%
add_osm_feature('shop','mall') %>%
osmdata_sf()
